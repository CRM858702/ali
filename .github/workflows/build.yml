name: Release Power Platform Solution

on:
  workflow_dispatch:
    inputs:
      solution_name:
        description: 'name of the solution to work on from Power Platform'
        required: true
        default: Solution1
      solution_exported_folder:
        description: 'folder name for staging the exported solution *do not change*'
        required: true
        default: out/exported/
      solution_folder:
        description: 'staging the unpacked solution folder before check-in *do not change*'
        required: true
        default: out/solutions/
      solution_target_folder: 
        description: 'folder name to be created and checked in *do not change*'
        required: true
        default: solutions/

jobs:
  release:
    runs-on: windows-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Install Power Platform CLI
        run: |
          Install-Module -Name Microsoft.PowerApps.Administration.PowerShell -Force -AllowClobber
          Install-Module -Name Microsoft.PowerApps.PowerShell -Force -AllowClobber

      - name: Authenticate with Power Platform
        run: |
          $secureClientSecret = ConvertTo-SecureString ${{ secrets.AZURE_CLIENT_SECRET }} -AsPlainText -Force
          $credentials = New-Object -TypeName System.Management.Automation.PSCredential -ArgumentList ${{ secrets.AZURE_CLIENT_ID }}, $secureClientSecret
          Add-PowerAppsAccount -TenantId ${{ secrets.AZURE_TENANT_ID }} -Credentials $credentials

      - name: Export Solution as Managed
        run: |
          $solutionName = "${{ github.event.inputs.solution_name }}"
          $targetFolder = "${{ github.event.inputs.solution_target_folder }}"
          Export-PowerAppSolution -EnvironmentName 'Default-Environment' -SolutionName $solutionName -SolutionFilePath "$targetFolder\managed.zip" -Asynchronous -Managed

      - name: Upload Managed Solution
        uses: actions/upload-artifact@v3
        with:
          name: managed-solution
          path: "${{ github.event.inputs.solution_target_folder }}\managed.zip"

      - name: Trigger Test Environment Deployment
        uses: actions/github-script@v6
        with:
          script: |
            const dispatch = await github.actions.createWorkflowDispatch({
              owner: context.repo.owner,
              repo: context.repo.repo,
              workflow_id: 'deploy-to-test.yml',
              ref: context.ref,
              inputs: {
                solution_name: "${{ github.event.inputs.solution_name }}",
                solution_target_folder: "${{ github.event.inputs.solution_target_folder }}"
              }
            });
